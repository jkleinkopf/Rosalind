#make complementary DNA by reversing sequence and finding complementary base for each nt

s = "CAGACCAGAATGCCGAAATGTGGACGTTAAGAAAGCGAACCTAACATCTCGGTCAGAAAAAATACAAACGCGAGGGGCCTAGAGTATCTCGCAAATCTCTCGATGAGCTGGACTAATTAAATGAGTCAGCATACAGCCGATATTCGGATGACTGAACTAGCAGAAGCTAACACGCCTAGCTAAGCCAAGTCAACGAAGAGCATTCGGTGAGCCACCGTTTCAGGACGCTTATTGCATGAGACCTAATGAGGGAATCTGTAAAGCACCAACGAAATCTGGCTCGTAACGGTCGATAGGAACGTTTCGAATGCCGTCCGTATCTATTAGTCACTCTACACACTGCGCCTATCTATTGAGGATGTGTCGCTCAGTTGCGTAGAACAGAGGGTGCCTATGCGCAACGGGAAGCGGGCGTATCTACCATGGTTTTCCTTGCTGATTGCACTTCTAGGGACACGCTCTATCTAGAGGTGAACCTTCGTTTCCCTTTGAAAAGTTTTAGGTCCAGACGCAGAAAGCTGTTGGGAGGGAACAATTGTAAAGTATTACCGAGCCGAAAGATACGAGCCCCGTACCTGCCAGCCCCTTGAGATACTACCAGCGTCGCTGATCACTTCTTAGATTACCAAAATCCATTATTAGTTGTCCCTACGGCTGAGCTAAATAAACCCCTGCGGTGGCTAGGTCGTAAGAAGAGAGACATTGGTTAGGTGATAACGTGTCCTGGAAGGCAGAGTAGTAACTGTAATTGCCCTGTCGGTCGCCCTATCCCAGCCCAGGTCCCATCGGCCGCGACAGGTGCCAAAGACCTTAATCATGACTAACTCTTTTTGCTTTACATTCGAACTGCTACAGGCGTGGAACCCAATAGGTTCGACCAGGTATACTT"

rs = s[::-1] #reverses the sequence

print rs
length=len(rs)

reverse_complement = ""

#iterate through reverse sequence and add complementary base to reverse_complement string
for i in range(length): 
	if rs[i] == "A":
		reverse_complement += "T"
	elif rs[i] == "T":
		reverse_complement += "A"
	elif rs[i] == "G":
		reverse_complement += "C"
	else:
		reverse_complement += "G"
		
print reverse_complement
	
