#make complementary DNA by reversing sequence and finding complementary base for each nt

s = "CAGACCAGAATGCCGAAATGTGGACGTTAAGAAAGCGAACCTAACATCTCGGTCAGAAAAAATACAAACGCGAGGGGCCTAGAGTATCTCGCAAATCTCTCGATGAGCTGGACTAATTAAATGAGTCAGCATACAGCCGATATTCGGATGACTGAACTAGCAGAAGCTAACACGCCTAGCTAAGCCAAGTCAACGAAGAGCATTCGGTGAGCCACCGTTTCAGGACGCTTATTGCATGAGACCTAATGAGGGAATCTGTAAAGCACCAACGAAATCTGGCTCGTAACGGTCGATAGGAACGTTTCGAATGCCGTCCGTATCTATTAGTCACTCTACACACTGCGCCTATCTATTGAGGATGTGTCGCTCAGTTGCGTAGAACAGAGGGTGCCTATGCGCAACGGGAAGCGGGCGTATCTACCATGGTTTTCCTTGCTGATTGCACTTCTAGGGACACGCTCTATCTAGAGGTGAACCTTCGTTTCCCTTTGAAAAGTTTTAGGTCCAGACGCAGAAAGCTGTTGGGAGGGAACAATTGTAAAGTATTACCGAGCCGAAAGATACGAGCCCCGTACCTGCCAGCCCCTTGAGATACTACCAGCGTCGCTGATCACTTCTTAGATTACCAAAATCCATTATTAGTTGTCCCTACGGCTGAGCTAAATAAACCCCTGCGGTGGCTAGGTCGTAAGAAGAGAGACATTGGTTAGGTGATAACGTGTCCTGGAAGGCAGAGTAGTAACTGTAATTGCCCTGTCGGTCGCCCTATCCCAGCCCAGGTCCCATCGGCCGCGACAGGTGCCAAAGACCTTAATCATGACTAACTCTTTTTGCTTTACATTCGAACTGCTACAGGCGTGGAACCCAATAGGTTCGACCAGGTATACTT"

rs = s[::-1] #reverses the sequence

new = rs.replace("A","a") 
new = new.replace("C", "c") 
new = new.replace("G", "C")
new = new.replace("T", "A")
new = new.replace("a","T")
new = new.replace("c", "G")
	#can't replace A with T and T with A because then all A and T will be A.
	#probably a more elegant way to do this problem
	
print s
print "----" * 10
print new